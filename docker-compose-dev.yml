version: '3.7'

services:
  frontend:
    image: hci/frontend:latest
    command: npm start
    container_name: frontend
    depends_on:
      -  backend
    expose: 
      - "3000"
    volumes:
      - ./src/frontend/src:/usr/src/src
      - frontend:/usr/src/
      - ./src/frontend/public:/usr/src/public
      - front_node_modules:/usr/src/node_modules
    environment:
      - HOST=0.0.0.0
      - PORT=${FRONTEND_PORT}
      - CHOKIDAR_USEPOLLING=true
      - API_HOST=${BACKEND_RUNNING_ON}
      - API_PORT=${BACKEND_PORT}
  backend: &backend
    user: "container_user:container_user"
    image: hci/backend:latest
    container_name: backend
    tty: true
    stdin_open: true
    depends_on:
      - db
      - rabbitmq
      - celery_worker
    expose: 
      - "8000"
    volumes:
      - ./src/backend:/opt/backend
    secrets:
      - sentry
      - postgres_db
      - postgres_usr
      - postgres_pswd
    env_file:
      - .env
    environment:
      - PYTHONPATH=/opt/backend
      - DJANGO_SETTINGS_MODULE=project.settings
      - FRONTEND_PORT=${FRONTEND_PORT}
      - POSTGRES_DB_FILE=/run/secrets/postgres_db
      - POSTGRES_USER_FILE=/run/secrets/postgres_usr
      - POSTGRES_PASSWORD_FILE=/run/secrets/postgres_pswd
      - SENTRY_DSN_FILE=/run/secrets/sentry
  db:
    image: postgres:12.1
    restart: unless-stopped
    container_name: database
    volumes:
      - pgdata:/var/lib/postgresql/data/
    secrets:
      - postgres_db
      - postgres_usr
      - postgres_pswd
    environment:
      - POSTGRES_DB_FILE=/run/secrets/postgres_db
      - POSTGRES_USER_FILE=/run/secrets/postgres_usr
      - POSTGRES_PASSWORD_FILE=/run/secrets/postgres_pswd
  rabbitmq:
    image: rabbitmq:3.8.2-alpine
    container_name: rabbitmq
    healthcheck:
      test: [ "CMD", "nc", "-z", "localhost", "5672" ]
      interval: 5s
      timeout: 15s
      retries: 1
  celery_worker:
    <<: *backend
    container_name: celery_worker
    command: start_celery worker
    ports: []
    deploy:
      replicas: 2
      restart_policy:
        condition: on-failure
      resources:
        limits:
          cpus: '0.50'
          memory: 50M
        reservations:
          cpus: '0.25'
          memory: 20M
    tty: false
    stdin_open: false
    depends_on: 
      - rabbitmq
      - db
  celery_beat:
    <<: *backend
    container_name: celery_beat
    command: start_celery beat
    ports: []
    tty: false
    stdin_open: false
    depends_on: 
      - rabbitmq
      - db
  nginx:
    image: nginx:1.17.6
    restart: always
    container_name: nginx
    ports:
      - 80:80
      - "443:443"
    volumes:
      - ./conf/nginx-proxy-dev.conf:/etc/nginx/conf.d/default.conf:ro
      - ./src/backend:/opt/backend
      - ./ssl/concatenated.cer:/etc/ssl/concatenated.cer
      - ./ssl/private_key.key:/etc/ssl/private_key.key
    depends_on:
      - backend    
volumes:
  pgdata:
  frontend:
    driver: local
    driver_opts:
      type: none
      device: $PWD/src/frontend/
      o: bind
  front_node_modules:
    driver: local
    driver_opts:
      type: none
      device: $PWD/src/frontend/node_modules
      o: bind

secrets:
  sentry:
    file: secret_sentry.txt
  postgres_db:
    file: secret_pst_db.txt
  postgres_usr:
    file: secret_pst_usr.txt
  postgres_pswd:
    file: secret_pst_pswd.txt
