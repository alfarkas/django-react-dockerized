version: '3.7'

services:
  backend: &backend
    user: "container_user:container_user"
    image: hci/backend:latest
    command: gunicorn project.wsgi --bind=0.0.0.0:8000 --workers=8
    tty: true
    stdin_open: true
    volumes:
      - ./src/backend:/opt/backend
    secrets:
      - sentry
      - postgres_db
      - postgres_usr
      - postgres_pswd
    env_file:
      - .env
    environment:
      - PYTHONPATH=/opt/backend
      - DJANGO_SETTINGS_MODULE=project.settings
      - FRONTEND_PORT=${FRONTEND_PORT}
      - POSTGRES_HOST_FILE=/run/secrets/postgres_host
      - POSTGRES_DB_FILE=/run/secrets/postgres_db
      - POSTGRES_USER_FILE=/run/secrets/postgres_usr
      - POSTGRES_PASSWORD_FILE=/run/secrets/postgres_pswd
      - SENTRY_DSN_FILE=/run/secrets/sentry
  db:
    image: postgres:12.1
    deploy:
      restart_policy:
        condition: on-failure
    volumes:
      - pgdata:/var/lib/postgresql/data/
    secrets:
      - postgres_db
      - postgres_usr
      - postgres_pswd
    environment:
      - POSTGRES_DB_FILE=/run/secrets/postgres_db
      - POSTGRES_USER_FILE=/run/secrets/postgres_usr
      - POSTGRES_PASSWORD_FILE=/run/secrets/postgres_pswd
  rabbitmq:
    image: rabbitmq:3.8.2-alpine
    healthcheck:
      test: [ "CMD", "nc", "-z", "localhost", "5672" ]
      interval: 5s
      timeout: 15s
      retries: 1
  celery_worker:
    <<: *backend
    command: celery -A api worker --loglevel=info --sentry ${SENTRY_DSN}
    deploy:
      restart_policy:
        condition: on-failure
    tty: false
    stdin_open: false
  celery_beat:
    <<: *backend
    command: celery -A api beat --loglevel=info --sentry ${SENTRY_DSN}
    deploy:
      restart_policy:
        condition: on-failure
    tty: false
    stdin_open: false
  nginx:
    image: hci/frontend:latest
    deploy:
      restart_policy:
        condition: on-failure
    ports:
      - 80:80
      - "443:443"
    volumes:
      - ./conf/nginx-proxy-prod.conf:/etc/nginx/conf.d/default.conf:ro
      # - ./src/frontend/build:/opt/frontend:ro
      - ./src/backend:/opt/backend
      - ./ssl/concatenated.cer:/etc/ssl/concatenated.cer
      - ./ssl/private_key.key:/etc/ssl/private_key.key
    depends_on:
      - backend    
volumes:
  pgdata:

secrets:
  sentry:
    file: secrets/sentry.txt
  postgres_db:
    file: secrets/pst_db.txt
  postgres_usr:
    file: secrets/pst_usr.txt
  postgres_pswd:
    file: secrets/pst_pswd.txt
  postgres_host:
    file: secrets/pst_host.txt