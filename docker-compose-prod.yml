version: '3'

services:
  frontend:
    user: "container_user:container_user"
    image: hci/frontend:latest
    # build:
    #   context: .
    #   dockerfile: dockerfiles/react
    # entrypoint: /entrypoint.sh
    command: npm run build
    container_name: frontend
    depends_on:
      -  backend
    #ports:
    #  - "${FRONTEND_PORT}:3000"
    expose: 
      - "3000"
    volumes:
      - ./src/frontend/src:/usr/src/src
      - ./src/frontend/public:/usr/src/public
      - ./src/frontend/build:/usr/src/build
    environment:
      - HOST=0.0.0.0
      - PORT=${FRONTEND_PORT}
      - CHOKIDAR_USEPOLLING=true
      - API_HOST=${BACKEND_RUNNING_ON}
      - API_PORT=${BACKEND_PORT}
  backend: &backend
    user: "container_user:container_user"
    build:
      context: .
      dockerfile: dockerfiles/backend
    command: gunicorn api.wsgi --bind=0.0.0.0
    container_name: backend
    depends_on:
      - db
      - rabbitmq
      - celery_worker
    #ports:
    #  - "${BACKEND_PORT}:8000"
    expose: 
      - "8000"
    volumes:
      - ./src/backend:/opt/backend
    environment:
      - PYTHONPATH=/opt/backend
      - DJANGO_SETTINGS_MODULE=api.settings
      - FRONTEND_PORT=${FRONTEND_PORT}
      - POSTGRES_DB=postgres
      - POSTGRES_USER=postgres
      - POSTGRES_PASSWORD=secret
  db:
    image: postgres:12.1
    restart: unless-stopped
    container_name: database
    volumes:
      - pgdata:/var/lib/postgresql/data/
    environment:
      - POSTGRES_DB=postgres
      - POSTGRES_USER=postgres
      - POSTGRES_PASSWORD=secret
  # rabbit message queue
  rabbitmq:
    image: rabbitmq:3.8.2-alpine
    container_name: rabbitmq
    healthcheck:
      test: [ "CMD", "nc", "-z", "localhost", "5672" ]
      interval: 5s
      timeout: 15s
      retries: 1
  celery_worker:
    <<: *backend
    container_name: celery_worker
    command: celery -A api worker --loglevel=info --sentry ${SENTRY_DSN}
    ports: []
    depends_on: 
      - rabbitmq
      - db
    # deploy:
    #   replicas: 1
    #   restart_policy:
    #     condition: on-failure
    #   resources:
    #     limits:
    #       cpus: '0.50'
    #       memory: 50M
    #     reservations:
    #       cpus: '0.25'
    #       memory: 20M
  celery_beat:
    <<: *backend
    container_name: celery_beat
    command: celery -A api beat --loglevel=info --sentry ${SENTRY_DSN}
    ports: []
    depends_on: 
      - rabbitmq
      - db
  nginx:
    image: nginx:1.17.6
    restart: always
    container_name: nginx
    ports:
      - 80:80
      - "443:443"
    volumes:
      - ./conf/nginx-proxy-prod.conf:/etc/nginx/conf.d/default.conf:ro
      - ./src/frontend/build:/opt/frontend:ro
      - ./src/backend:/opt/backend
      - ./ssl/concatenated.cer:/etc/ssl/concatenated.cer
      - ./ssl/private_key.key:/etc/ssl/private_key.key
    depends_on:
      - backend    
volumes:
  pgdata:
